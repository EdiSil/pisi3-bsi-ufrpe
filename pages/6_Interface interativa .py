import streamlit as st
import pickle
import numpy as np

# Fun√ß√£o para carregar o modelo treinado
@st.cache_resource
def carregar_modelo(caminho_modelo):
    """
    Carrega o modelo treinado de um arquivo pickle.

    Args:
        caminho_modelo (str): Caminho para o arquivo do modelo.

    Returns:
        object: Modelo treinado.
    """
    try:
        with open(caminho_modelo, 'rb') as file:
            modelo = pickle.load(file)
        return modelo
    except Exception as e:
        st.error(f"Erro ao carregar o modelo: {e}")
        return None

# Fun√ß√£o principal para a aplica√ß√£o
def main():
    st.title("Previs√£o de Pre√ßo de Carros üöó")
    st.markdown(
        """
        Esta aplica√ß√£o utiliza um modelo de Machine Learning para prever o pre√ßo de carros com base em:
        - **KM driven (quil√¥metros rodados)**  
        - **Ano do carro**  
        
        **Insira os dados abaixo para obter uma estimativa.**
        """
    )

    # Entrada de dados do usu√°rio
    km = st.number_input(
        "Quil√¥metros rodados (KM driven)",
        min_value=0.0,
        format="%.2f",
        step=100.0,
        help="Digite a quantidade de quil√¥metros rodados pelo carro. Valores decimais s√£o aceitos."
    )

    ano = st.number_input(
        "Ano do carro",
        min_value=1900,
        max_value=2024,
        step=1,
        help="Digite o ano de fabrica√ß√£o do carro. Deve ser um valor inteiro entre 1900 e 2024."
    )

    # Carregar o modelo salvo
    caminho_modelo = "modelo_random_forest.pkl"  # Ajuste o caminho se necess√°rio
    modelo = carregar_modelo(caminho_modelo)

    if modelo:
        if st.button("Prever Pre√ßo"):
            try:
                # Preparar os dados de entrada para o modelo
                entrada = np.array([[km, ano]])
                
                # Fazer a previs√£o
                preco_previsto = modelo.predict(entrada)

                # Exibir o resultado
                st.success(f"Pre√ßo Previsto: **R$ {preco_previsto[0]:,.2f}**")
                st.info(
                    "Observa√ß√£o: Esta previs√£o √© baseada nos dados dispon√≠veis e pode variar dependendo de outros fatores."
                )
            except Exception as e:
                st.error(f"Erro ao realizar a previs√£o: {e}")
    else:
        st.error("O modelo n√£o p√¥de ser carregado. Certifique-se de que o arquivo do modelo est√° dispon√≠vel.")

    # Rodap√© com informa√ß√µes adicionais
    st.markdown(
        """
        ---
        **Desenvolvido por [Seu Nome/Empresa]**  
        Este modelo foi treinado utilizando dados hist√≥ricos de ve√≠culos.
        """
    )

if __name__ == "__main__":
    main()
